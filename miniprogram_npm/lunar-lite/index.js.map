{"version":3,"sources":["index.js","misc.js","constants.js","convertor.js","ganzhi.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AJYA,ACHA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./misc\"), exports);\n__exportStar(require(\"./ganzhi\"), exports);\n__exportStar(require(\"./convertor\"), exports);\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTotalDaysOfLunarMonth = exports.getZodiac = exports.getSign = void 0;\nvar lunar_typescript_1 = require(\"lunar-typescript\");\nvar constants_1 = require(\"./constants\");\nvar convertor_1 = require(\"./convertor\");\n/**\n * 获取星座\n *\n * @param  solarDateStr [description]\n * @return 星座\n */\nvar getSign = function (solarDateStr) {\n    var _a = (0, convertor_1.normalizeDateStr)(solarDateStr), year = _a[0], month = _a[1], day = _a[2];\n    return lunar_typescript_1.Solar.fromYmd(year, month, day).getXingZuo() + \"座\";\n};\nexports.getSign = getSign;\n/**\n * 通过年支获取生肖\n *\n * @param earthlyBranchOfYear 年支\n * @example\n * const zodiac = calendar.getZodiac(\"卯\") ;// zodiac='兔'\n */\nvar getZodiac = function (earthlyBranchOfYear) {\n    return constants_1.ZODIAC[constants_1.EARTHLY_BRANCHES.indexOf(earthlyBranchOfYear)];\n};\nexports.getZodiac = getZodiac;\n/**\n * 按照传入阳历日期获取该月农历月份天数\n *\n * @param solarDateStr 阳历日期\n * @returns {number} 日期天数\n */\nvar getTotalDaysOfLunarMonth = function (solarDateStr) {\n    var _a;\n    var _b = (0, convertor_1.solar2lunar)(solarDateStr), lunarYear = _b.lunarYear, lunarMonth = _b.lunarMonth, isLeap = _b.isLeap;\n    var month = lunar_typescript_1.LunarMonth.fromYm(lunarYear, isLeap ? 0 - lunarMonth : lunarMonth);\n    return (_a = month === null || month === void 0 ? void 0 : month.getDayCount()) !== null && _a !== void 0 ? _a : 0;\n};\nexports.getTotalDaysOfLunarMonth = getTotalDaysOfLunarMonth;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ZODIAC = exports.EARTHLY_BRANCHES = exports.HEAVENLY_STEMS = void 0;\n/**\n * 天干速查表\n */\nexports.HEAVENLY_STEMS = [\n    \"甲\",\n    \"乙\",\n    \"丙\",\n    \"丁\",\n    \"戊\",\n    \"己\",\n    \"庚\",\n    \"辛\",\n    \"壬\",\n    \"癸\",\n];\n/**\n * 地支速查表\n */\nexports.EARTHLY_BRANCHES = [\n    \"子\",\n    \"丑\",\n    \"寅\",\n    \"卯\",\n    \"辰\",\n    \"巳\",\n    \"午\",\n    \"未\",\n    \"申\",\n    \"酉\",\n    \"戌\",\n    \"亥\",\n];\n/** 十二生肖（按地支顺序） */\nexports.ZODIAC = [\n    \"鼠\",\n    \"牛\",\n    \"虎\",\n    \"兔\",\n    \"龙\",\n    \"蛇\",\n    \"马\",\n    \"羊\",\n    \"猴\",\n    \"鸡\",\n    \"狗\",\n    \"猪\",\n];\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lunar2solar = exports.solar2lunar = exports.normalizeDateStr = void 0;\nvar lunar_typescript_1 = require(\"lunar-typescript\");\n/**\n * 将日期字符串 YYYY-MM-DD 或者一个 Date 对象分割为 [YYYY, M, D, H, m, s]\n * 当参数为字符串时分割符可以是 `-` `.` 或者 `/`\n *\n * @param dateStr 日期字符串或者 Date 对象\n * @returns [年, 月, 日]\n * @example\n * normalizeDateStr('2023-07-31'); // [2023, 7, 31]\n */\nvar normalizeDateStr = function (date) {\n    if (date instanceof Date) {\n        return [\n            date.getFullYear(),\n            date.getMonth() + 1,\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n        ];\n    }\n    return date\n        .split(/[ ]+/)\n        .map(function (item) { return item.split(/[-:/.]/); })\n        .reduce(function (prev, next) { return prev.concat(next); }, [])\n        .map(function (item) { return Math.abs(+item); });\n};\nexports.normalizeDateStr = normalizeDateStr;\n/**\n * 公历转农历，年份需要在【1900~2100】之间，并且日期必须在1900-1-31之后\n *\n * @param dateStr 公历日期 YYYY-MM-DD格式的字符串或者Date对象\n * @returns LunarDate\n */\nvar solar2lunar = function (dateStr) {\n    var _a = (0, exports.normalizeDateStr)(dateStr), year = _a[0], month = _a[1], day = _a[2];\n    var solar = lunar_typescript_1.Solar.fromYmd(year, month, day);\n    var lunar = solar.getLunar();\n    var lunarYear = lunar.getYear();\n    var lunarMonth = Math.abs(lunar.getMonth());\n    var lunarDay = lunar.getDay();\n    var isLeap = lunar.getMonth() < 0;\n    return {\n        lunarYear: lunarYear,\n        lunarMonth: lunarMonth,\n        lunarDay: lunarDay,\n        isLeap: isLeap,\n        toString: function (toCnStr) {\n            if (toCnStr) {\n                return lunar.toString();\n            }\n            return \"\".concat(lunarYear, \"-\").concat(lunarMonth, \"-\").concat(lunarDay);\n        },\n    };\n};\nexports.solar2lunar = solar2lunar;\n/**\n * 农历转公历\n *\n * @param dateStr 农历日期 YYYY-MM-DD\n * @param isLeapMonth 是否闰月，若该月不是闰月，会忽略该参数\n * @returns SolarDate\n */\nvar lunar2solar = function (dateStr, isLeapMonth) {\n    var _a = (0, exports.normalizeDateStr)(dateStr), year = _a[0], month = _a[1], day = _a[2];\n    var lunar = lunar_typescript_1.Lunar.fromYmd(year, month, day);\n    var lunarYear = lunar_typescript_1.LunarYear.fromYear(lunar.getYear());\n    var leapMonth = lunarYear.getLeapMonth();\n    if (leapMonth > 0 && leapMonth === month && isLeapMonth) {\n        lunar = lunar_typescript_1.Lunar.fromYmd(year, 0 - month, day);\n    }\n    var solar = lunar.getSolar();\n    var solarYear = solar.getYear();\n    var solarMonth = solar.getMonth();\n    var solarDay = solar.getDay();\n    return {\n        solarYear: solarYear,\n        solarMonth: solarMonth,\n        solarDay: solarDay,\n        toString: function () {\n            return \"\".concat(solarYear, \"-\").concat(solarMonth, \"-\").concat(solarDay);\n        },\n    };\n};\nexports.lunar2solar = lunar2solar;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHeavenlyStemAndEarthlyBranchBySolarDate = exports.getHeavenlyStemAndEarthlyBranchByLunarDate = void 0;\nvar convertor_1 = require(\"./convertor\");\nvar lunar_typescript_1 = require(\"lunar-typescript\");\n/**\n * 通过农历获取生辰干支\n *\n * @param dateStr 农历日期 YYYY-MM-DD\n * @param timeIndex 时辰索引【0～12】\n * @param isLeap 是否为闰月\n * @returns HeavenlyStemAndEarthlyBranchResult\n */\nvar getHeavenlyStemAndEarthlyBranchByLunarDate = function (dateStr, timeIndex, isLeap, options) {\n    if (options === void 0) { options = { year: \"normal\" }; }\n    var solarDate = (0, convertor_1.lunar2solar)(dateStr, isLeap);\n    return (0, exports.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate.toString(), timeIndex, options);\n};\nexports.getHeavenlyStemAndEarthlyBranchByLunarDate = getHeavenlyStemAndEarthlyBranchByLunarDate;\n/**\n * 将阳历转化为干支纪年\n *\n * @param dateStr 公历日期 YYYY-MM-DD\n * @param timeIndex 时辰索引【0～12】\n * @returns HeavenlyStemAndEarthlyBranchResult\n */\nvar getHeavenlyStemAndEarthlyBranchBySolarDate = function (dateStr, timeIndex, options) {\n    if (options === void 0) { options = { year: \"exact\" }; }\n    var _a = (0, convertor_1.normalizeDateStr)(dateStr), year = _a[0], month = _a[1], date = _a[2];\n    var solar = lunar_typescript_1.Solar.fromYmdHms(year, month, date, Math.max(timeIndex * 2 - 1, 0), 30, 0);\n    var lunar = solar.getLunar();\n    var yearlyGan = (options === null || options === void 0 ? void 0 : options.year) === \"normal\"\n        ? lunar.getYearGan()\n        : lunar.getYearGanByLiChun();\n    var yearlyZhi = (options === null || options === void 0 ? void 0 : options.year) === \"normal\"\n        ? lunar.getYearZhi()\n        : lunar.getYearZhiByLiChun();\n    var yearly = [\n        yearlyGan,\n        yearlyZhi,\n    ];\n    var monthly = [\n        lunar.getMonthGanExact(),\n        lunar.getMonthZhiExact(),\n    ];\n    var daily = [\n        lunar.getDayGanExact(),\n        lunar.getDayZhiExact(),\n    ];\n    var hourly = [\n        lunar.getTimeGan(),\n        lunar.getTimeZhi(),\n    ];\n    return {\n        yearly: yearly,\n        monthly: monthly,\n        daily: daily,\n        hourly: hourly,\n        toString: function () {\n            return \"\".concat(yearly.join(\"\"), \" \").concat(monthly.join(\"\"), \" \").concat(daily.join(\"\"), \" \").concat(hourly.join(\"\"));\n        },\n    };\n};\nexports.getHeavenlyStemAndEarthlyBranchBySolarDate = getHeavenlyStemAndEarthlyBranchBySolarDate;\n"]}